using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Collections;
using System.Net;

namespace Haberlesme
{
    
    public partial class Form1 : Form
    {

        public Form1()

        {
            InitializeComponent();
        }

         public Socket Socket_Communication;
         public static EndPoint PC_EndPoint, Device_EndPoint;
         public static Int32 XKoor;
         public static Int32 Byte_Total;
         public static byte[] Udp_GelenVeri;
         public static byte[] Receive;

  
        public class SeriHaberlesme
        {
            public static byte UDP_CRC_Hesapla(byte[] AraDizi, byte AraDataSayisi)
            {

                byte Ara;
                byte i;
                Ara = AraDizi[0];
                for (i = 1; i <= AraDataSayisi + 1; i++)
                {
                    Ara = (byte)(Ara ^ AraDizi[i]);
                }

                Ara = (byte)~Ara;
                return Ara;
            }

            public static void UDP_GELEN_VERI_KONTROL()

            {
                switch (Udp_GelenVeri[0])
                {
                    
                    case 1:

                        X_KOOR_OKU();

                        break;

                           
                }
            }


        }
    
        private void OperatorCallback(IAsyncResult result)
        {
            byte Checksum;
            byte i;

            Byte_Total = Socket_Communication.EndReceiveFrom(result, ref Device_EndPoint);
            if (Byte_Total > 0)
            {

                Udp_GelenVeri = (Byte[])result.AsyncState;
                Checksum = SeriHaberlesme.UDP_CRC_Hesapla(Udp_GelenVeri, Udp_GelenVeri[1]);

                i = Udp_GelenVeri[1];
                if (Checksum == Udp_GelenVeri[i + 2])
                    SeriHaberlesme.UDP_GELEN_VERI_KONTROL();
                else
                {
                    MessageBox.Show("Hatalı Bilgi Geldi");
                }
            }

            Socket_Communication.BeginReceiveFrom(Udp_GelenVeri, 0, Udp_GelenVeri.Length, SocketFlags.None, ref Device_EndPoint, new AsyncCallback(OperatorCallback), Udp_GelenVeri);
        }

        public static void X_KOOR_OKU()

        {
            XKoor = (Convert.ToInt32(256) * Udp_GelenVeri[2]) + Udp_GelenVeri[3];
        }

        private void button1_Click(object sender, EventArgs e)

        {

            XKoor = (Convert.ToInt32(256) * Udp_GelenVeri[2]) + Udp_GelenVeri[3];
            
        }

        
        private void button2_Click(object sender, EventArgs e)

        {
            
            byte[] SendValue = new byte[10] ;
            byte caseVal = 0;
            UInt16 koorVal = 0;
            byte speedVal = 0;
            byte CRCVal = 0;

            CRCVal = Convert.ToByte(textBox2.Text);
            caseVal = Convert.ToByte(textBox2.Text);
            koorVal = Convert.ToUInt16(textBox3.Text);
            speedVal = Convert.ToByte(textBox4.Text);

            SendValue[0] = CRCVal;
            SendValue[1] = caseVal;
            SendValue[2] = (byte)(koorVal >> 8);
            SendValue[3] = (byte)(koorVal & 0x00FF) ;      
            SendValue[4] = speedVal;
            SendValue[5] = 25;

            label6.Text = SendValue[2].ToString();
            label11.Text = SendValue[3].ToString();
            label7.Text = koorVal.ToString();
            label8.Text = speedVal.ToString();
            label9.Text = caseVal.ToString();
            label10.Text = CRCVal.ToString();
          
            try

            {
                SendValue[5] = SeriHaberlesme.UDP_CRC_Hesapla(SendValue, SendValue[1]);

                Socket_Communication.Send(SendValue);

                return;     // Vb6 => Exit Sub   çevrilmedi !! //
            }

            catch (Exception hataXPoz)

            {
                MessageBox.Show("Error Axis X-Send:" + hataXPoz.ToString());
            }

            
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            try // !! On Error GoTo hata ___________  hata:___________   ------> Try-catch blogu mu öğrenilmedi !! //
            {


                Socket_Communication = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
                Socket_Communication.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, 1);
                Socket_Communication.EnableBroadcast = true;

                PC_EndPoint = new IPEndPoint(IPAddress.Parse("192.168.1.15"), Convert.ToInt32("2762"));
                Socket_Communication.Bind(PC_EndPoint);

                Device_EndPoint = new IPEndPoint(IPAddress.Parse("192.168.1.14"), Convert.ToInt32("65100"));
                Socket_Communication.Connect(Device_EndPoint);

            }

            catch (Exception hata)
            {
                MessageBox.Show("Hata: " + "Baglanti Hatasi" + hata.ToString());
                Socket_Communication.Close();
            }


            Udp_GelenVeri = new Byte[30];
            Socket_Communication.BeginReceiveFrom(Udp_GelenVeri, 0, Udp_GelenVeri.Length, SocketFlags.None, ref Device_EndPoint, new AsyncCallback(OperatorCallback), Udp_GelenVeri);
            timer1.Enabled = true;
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

  
    }
}
